{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{038c09b5-0801-4096-bde7-256f703ad606}\",\n            \"in_index\": 0,\n            \"out_id\": \"{37ced34d-0bcd-4c06-96ff-c309f8dad0ff}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{d95e6de7-26c0-40d4-883a-c8a58a13f790}\",\n            \"in_index\": 0,\n            \"out_id\": \"{76be71a3-0d18-4113-b8b5-ea24fa447807}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{76be71a3-0d18-4113-b8b5-ea24fa447807}\",\n            \"in_index\": 0,\n            \"out_id\": \"{932f5e0e-491c-4fd0-9a25-130d0891f293}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{a5d2b8a1-81a4-4ee0-a195-400ccb4323f5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3f5a2bbd-a638-49c8-a9a7-8eb1cc5c4d74}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{6eb01f0e-9c49-438b-a73e-5354052a299b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{d95e6de7-26c0-40d4-883a-c8a58a13f790}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{932f5e0e-491c-4fd0-9a25-130d0891f293}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3f5a2bbd-a638-49c8-a9a7-8eb1cc5c4d74}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b931f94c-ba84-40b8-b385-31c8a34bdfa6}\",\n            \"in_index\": 0,\n            \"out_id\": \"{5e5189a7-2f4d-4b51-a970-cf8997d2ee8b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{dd6ca20e-f08f-45cf-876f-8cae7bd5d116}\",\n            \"in_index\": 0,\n            \"out_id\": \"{038c09b5-0801-4096-bde7-256f703ad606}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9fa5ea38-39ec-4f2e-923c-276b2d2448ba}\",\n            \"in_index\": 0,\n            \"out_id\": \"{76be71a3-0d18-4113-b8b5-ea24fa447807}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4abaf3e2-cd50-4c30-a2f3-ecf28da40144}\",\n            \"in_index\": 0,\n            \"out_id\": \"{6eb01f0e-9c49-438b-a73e-5354052a299b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2a721cab-adaa-4e39-aafc-4029f8b5b921}\",\n            \"in_index\": 0,\n            \"out_id\": \"{038c09b5-0801-4096-bde7-256f703ad606}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{6eb01f0e-9c49-438b-a73e-5354052a299b}\",\n            \"in_index\": 1,\n            \"out_id\": \"{2a721cab-adaa-4e39-aafc-4029f8b5b921}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{37ced34d-0bcd-4c06-96ff-c309f8dad0ff}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b931f94c-ba84-40b8-b385-31c8a34bdfa6}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{5e5189a7-2f4d-4b51-a970-cf8997d2ee8b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b931f94c-ba84-40b8-b385-31c8a34bdfa6}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{3f5a2bbd-a638-49c8-a9a7-8eb1cc5c4d74}\",\n            \"in_index\": 0,\n            \"out_id\": \"{a5d2b8a1-81a4-4ee0-a195-400ccb4323f5}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{932f5e0e-491c-4fd0-9a25-130d0891f293}\",\n            \"model\": {\n                \"data\": {\n                    \"console\": \"\",\n                    \"height\": 430,\n                    \"js_code\": \"if(!hasGlobal(\\\"AiAct\\\")){\\n\\tsetGlobal(\\\"AiAct\\\",\\\"deaction\\\")\\n}\\nif(!hasGlobal(\\\"car_Front\\\")){\\n\\tsetGlobal(\\\"car_Front\\\",\\\"False\\\")\\n}\\n\\npayload.AiAct = getGlobal(\\\"AiAct\\\")\\npayload.car_Front = getGlobal(\\\"car_Front\\\")\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 338,\n                        \"splt1\": 85\n                    },\n                    \"width\": 400\n                },\n                \"name\": \"JavaScript\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 55.114748700000106,\n                \"y\": -151.80461450000013\n            }\n        },\n        {\n            \"id\": \"{a5d2b8a1-81a4-4ee0-a195-400ccb4323f5}\",\n            \"model\": {\n                \"name\": \"AutoRun\",\n                \"node_enable\": false\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -490.21899999999977,\n                \"y\": -186.76390952120002\n            }\n        },\n        {\n            \"id\": \"{4abaf3e2-cd50-4c30-a2f3-ecf28da40144}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_start\": true,\n                    \"caption\": \"\",\n                    \"code\": \"import json\\r\\nimport time\\r\\nimport sys\\r\\nimport math\\r\\nfrom enum import Enum\\r\\n\\r\\nimport paho.mqtt.client as mqtt\\r\\n\\r\\n# ---------- MQTT / Broker ----------\\r\\nbroker_address = \\\"broker-mqtt.local\\\" #เปลี่ยนตาม ip หรือชื่อเครื่องตนเอง\\r\\nport = 1883\\r\\n\\r\\n# MQTT Topics (คงเดิม)\\r\\ntopic_sub_a      = \\\"traffic/detect/A\\\"\\r\\ntopic_sub_b      = \\\"traffic/detect/B\\\"\\r\\ntopic_sub_time   = \\\"traffic/time/max_green\\\"\\r\\ntopic_sub_manual = \\\"traffic/manual\\\"\\r\\ncontrol_topic    = \\\"traffic/control\\\"\\r\\n\\r\\n# publish detection A (ตามสไตล์ Cira Core bridge)\\r\\ntopic_pub_a = \\\"traffic/detect/A\\\"\\r\\n\\r\\n# NEW: telemetry สำหรับ countdown\\r\\ntopic_pub_max_remaining = \\\"traffic/telemetry/max_green_remaining\\\"\\r\\n\\r\\n# ---------- State/Config ----------\\r\\nvehicle_data = {\\\"A\\\": None, \\\"B\\\": None}\\r\\nmanual_mode = False\\r\\n\\r\\n# เวลาหลัก\\r\\nmax_green_time   = 15   # ปรับได้ผ่าน MQTT\\r\\nmin_green_time   = 2    # กันสลับเร็วเกิน\\r\\nclear_delay      = 1    # all-red ขั้นต่ำเพื่อเคลียร์กลาง\\r\\npost_clear_wait  = 4    # หน่วงความปลอดภัยหลัง \\\"หลังกล้องว่างสองฝั่ง\\\"\\r\\n\\r\\n# ตัวแปรเวลาที่กัน system clock กระโดด\\r\\nlast_green_time  = 0.0\\r\\ngreen_a_duration = 0.0\\r\\ngreen_b_duration = 0.0\\r\\n\\r\\n# สถานะการควบคุมเดิม (เพื่อความเข้ากันได้กับแอปที่อ่าน control)\\r\\ncurrent_state      = \\\"\\\"    # \\\"A\\\" | \\\"B\\\" | \\\"RED\\\" | \\\"BLINK\\\"\\r\\nlast_granted_side  = \\\"\\\"    # \\\"A\\\" | \\\"B\\\"\\r\\n\\r\\nclass State(Enum):\\r\\n\\tALL_RED = 0\\r\\n\\tGREEN_A = 1\\r\\n\\tGREEN_B = 2\\r\\n\\tCLEARING_FROM_A = 3\\r\\n\\tCLEARING_FROM_B = 4\\r\\n\\tMANUAL = 5\\r\\n\\r\\nfsm_state = State.ALL_RED\\r\\n\\r\\n# จับเวลา FSM\\r\\nt_state          = time.monotonic()\\r\\nt_green_start    = t_state\\r\\nt_clear_start    = t_state\\r\\nboth_sides_since = None     # เริ่มนับสลับเมื่อมีรถหน้าทั้งสองฝั่ง\\r\\npost_clear_start = None     # เริ่มจับ 5 วิหลัง \\\"หลังกล้องว่างทั้งสองฝั่ง\\\"\\r\\n\\r\\n# QoS (เลือกได้ถ้าต้องการความชัวร์ขึ้น)\\r\\nUSE_QOS1 = False\\r\\nQOS = 1 if USE_QOS1 else 0\\r\\n\\r\\n# สำหรับ telemetry countdown (ลดสแปม)\\r\\nlast_remaining_sent = None\\r\\n\\r\\n# ---------- Utils for Cira Core env ----------\\r\\ntry:\\r\\n\\tsys.stdout.reconfigure(encoding='utf-8')\\r\\nexcept Exception:\\r\\n\\tpass\\r\\n\\r\\n# ---------- MQTT client (รองรับทั้ง paho 1.x / 2.x) ----------\\r\\ndef make_client():\\r\\n\\ttry:\\r\\n\\t\\tv2 = getattr(mqtt, \\\"CallbackAPIVersion\\\", None)\\r\\n\\t\\tif v2 is not None:\\r\\n\\t\\t\\treturn mqtt.Client(callback_api_version=v2.VERSION2)\\r\\n\\texcept Exception:\\r\\n\\t\\tpass\\r\\n\\treturn mqtt.Client()\\r\\n\\r\\nclient = make_client()\\r\\n\\r\\n# ===================== Handlers =====================\\r\\ndef on_message(client, userdata, message):\\r\\n\\tglobal vehicle_data, max_green_time, manual_mode\\r\\n\\r\\n\\ttry:\\r\\n\\t\\tprint(f\\\"[DEBUG] (on_message) recv topic: {message.topic}\\\")\\r\\n\\r\\n\\t\\tif message.topic == topic_sub_a:\\r\\n\\t\\t\\tvehicle_data[\\\"A\\\"] = json.loads(message.payload.decode())\\r\\n\\t\\t\\tif \\\"timestamp\\\" not in vehicle_data[\\\"A\\\"]:\\r\\n\\t\\t\\t\\tvehicle_data[\\\"A\\\"][\\\"timestamp\\\"] = int(time.time())\\r\\n\\t\\t\\tfsm_tick()\\r\\n\\r\\n\\t\\telif message.topic == topic_sub_b:\\r\\n\\t\\t\\tvehicle_data[\\\"B\\\"] = json.loads(message.payload.decode())\\r\\n\\t\\t\\tif \\\"timestamp\\\" not in vehicle_data[\\\"B\\\"]:\\r\\n\\t\\t\\t\\tvehicle_data[\\\"B\\\"][\\\"timestamp\\\"] = int(time.time())\\r\\n\\t\\t\\tfsm_tick()\\r\\n\\r\\n\\t\\telif message.topic == topic_sub_time:\\r\\n\\t\\t\\tpayload = json.loads(message.payload.decode())\\r\\n\\t\\t\\tmax_green_time = payload.get(\\\"A\\\", max_green_time)\\r\\n\\t\\t\\tprint(f\\\"[DEBUG] set max_green_time = {max_green_time}s\\\")\\r\\n\\t\\t\\t# ถ้ากำลังนับอยู่ ให้อัปเดต countdown ทันที\\r\\n\\t\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\t\\tpublish_remaining(calc_remaining(time.monotonic()))\\r\\n\\r\\n\\t\\telif message.topic == topic_sub_manual:\\r\\n\\t\\t\\tpayload = json.loads(message.payload.decode())\\r\\n\\t\\t\\tmode_str = str(payload.get(\\\"mode\\\", \\\"\\\")).lower()\\r\\n\\t\\t\\twas_manual = manual_mode\\r\\n\\t\\t\\tmanual_mode = (mode_str == \\\"manual\\\")\\r\\n\\t\\t\\tprint(f\\\"[DEBUG] mode => {'MANUAL' if manual_mode else 'AUTO'}\\\")\\r\\n\\r\\n\\t\\t\\tif manual_mode:\\r\\n\\t\\t\\t\\tcommand = payload.get(\\\"command\\\", \\\"\\\").lower()\\r\\n\\t\\t\\t\\tif not command:\\r\\n\\t\\t\\t\\t\\treturn\\r\\n\\t\\t\\t\\tif command == \\\"green_a\\\":\\r\\n\\t\\t\\t\\t\\tgrant_green(\\\"A\\\", mode=\\\"manual\\\")\\r\\n\\t\\t\\t\\t\\tset_fsm_state(State.GREEN_A)\\r\\n\\t\\t\\t\\telif command == \\\"green_b\\\":\\r\\n\\t\\t\\t\\t\\tgrant_green(\\\"B\\\", mode=\\\"manual\\\")\\r\\n\\t\\t\\t\\t\\tset_fsm_state(State.GREEN_B)\\r\\n\\t\\t\\t\\telif command == \\\"blink\\\":\\r\\n\\t\\t\\t\\t\\tblink_light(mode=\\\"manual\\\")\\r\\n\\t\\t\\t\\t\\tset_fsm_state(State.MANUAL)\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\tprint(\\\"[MANUAL] unknown command:\\\", command)\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\tif was_manual:\\r\\n\\t\\t\\t\\t\\t# กลับออโต้: เข้าช่วงเคลียร์ตามฝั่งเดิม + รอหลังว่างจริง + รอ post_clear_wait\\r\\n\\t\\t\\t\\t\\tprint(\\\"[AUTO] back to auto -> CLEARING then resume (backs clear + safety wait)\\\")\\r\\n\\t\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\t\\t\\tif current_state == \\\"A\\\":\\r\\n\\t\\t\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_A)\\r\\n\\t\\t\\t\\t\\telif current_state == \\\"B\\\":\\r\\n\\t\\t\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_B)\\r\\n\\t\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\t\\tset_fsm_state(State.ALL_RED)\\r\\n\\t\\t\\t\\t\\treset_timers_for_auto()\\r\\n\\t\\t\\t\\t\\treturn\\r\\n\\r\\n\\texcept Exception as e:\\r\\n\\t\\tprint(f\\\"[ERROR] on_message: {e}\\\")\\r\\n\\r\\ndef reset_timers_for_auto():\\r\\n\\tglobal t_state, t_green_start, t_clear_start, both_sides_since, post_clear_start\\r\\n\\tnow = time.monotonic()\\r\\n\\tt_state = now\\r\\n\\tt_green_start = now\\r\\n\\tt_clear_start = now\\r\\n\\tif both_sides_since is not None:\\r\\n\\t\\tclear_countdown()\\r\\n\\tboth_sides_since = None\\r\\n\\tpost_clear_start = None\\r\\n\\r\\ndef set_fsm_state(new_state):\\r\\n\\tglobal fsm_state, t_state, t_green_start, t_clear_start, both_sides_since, post_clear_start\\r\\n\\tif new_state == fsm_state:\\r\\n\\t\\treturn\\r\\n\\tfsm_state = new_state\\r\\n\\tnow = time.monotonic()\\r\\n\\tt_state = now\\r\\n\\tif new_state in (State.GREEN_A, State.GREEN_B):\\r\\n\\t\\tt_green_start = now\\r\\n\\t\\ta_front, b_front = get_fronts()\\r\\n\\t\\tif a_front and b_front and both_sides_since is None:\\r\\n\\t\\t\\tboth_sides_since = now\\r\\n\\t\\t\\tpublish_remaining(calc_remaining(now))  # เริ่ม countdown\\r\\n\\t\\telse:\\r\\n\\t\\t\\tif both_sides_since is not None and not (a_front and b_front):\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\tboth_sides_since = None\\r\\n\\t\\tpost_clear_start = None\\r\\n\\telif new_state in (State.CLEARING_FROM_A, State.CLEARING_FROM_B):\\r\\n\\t\\tt_clear_start = now\\r\\n\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\tclear_countdown()\\r\\n\\t\\tboth_sides_since = None\\r\\n\\t\\tpost_clear_start = None\\r\\n\\telif new_state == State.ALL_RED:\\r\\n\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\tclear_countdown()\\r\\n\\t\\tboth_sides_since = None\\r\\n\\t\\tpost_clear_start = None\\r\\n\\r\\ndef get_fronts():\\r\\n\\ta = vehicle_data.get(\\\"A\\\") or {}\\r\\n\\tb = vehicle_data.get(\\\"B\\\") or {}\\r\\n\\treturn a.get(\\\"front_detected\\\", False), b.get(\\\"front_detected\\\", False)\\r\\n\\r\\ndef get_backs():\\r\\n\\ta = vehicle_data.get(\\\"A\\\") or {}\\r\\n\\tb = vehicle_data.get(\\\"B\\\") or {}\\r\\n\\treturn a.get(\\\"back_detected\\\", False), b.get(\\\"back_detected\\\", False)\\r\\n\\r\\n# --- Countdown helpers ---\\r\\ndef calc_remaining(now_monotonic: float) -> int:\\r\\n\\t\\\"\\\"\\\"คำนวณวินาทีคงเหลือของรอบที่กำลังนับ (ปัดลงเป็น int ขั้นต่ำ 0)\\\"\\\"\\\"\\r\\n\\tif both_sides_since is None:\\r\\n\\t\\treturn 0\\r\\n\\telapsed_both = now_monotonic - both_sides_since\\r\\n\\trem = max(0, int(math.floor(max_green_time - elapsed_both)))\\r\\n\\treturn rem\\r\\n\\r\\ndef publish_remaining(value: int):\\r\\n\\t\\\"\\\"\\\"publish เฉพาะเมื่อค่าต่างจากครั้งก่อน เพื่อลดสแปม\\\"\\\"\\\"\\r\\n\\tglobal last_remaining_sent\\r\\n\\tif last_remaining_sent == value:\\r\\n\\t\\treturn\\r\\n\\tclient.publish(topic_pub_max_remaining, str(int(value)), qos=QOS)\\r\\n\\tlast_remaining_sent = value\\r\\n\\tprint(f\\\"[PUB] countdown -> {value} on {topic_pub_max_remaining}\\\")\\r\\n\\r\\ndef clear_countdown():\\r\\n\\t\\\"\\\"\\\"รีเซ็ต countdown (ส่ง 0 และรีเซ็ต state ภายใน)\\\"\\\"\\\"\\r\\n\\tglobal last_remaining_sent\\r\\n\\tpublish_remaining(0)\\r\\n\\tlast_remaining_sent = 0\\r\\n\\r\\ndef ensure_all_red():\\r\\n\\tglobal current_state\\r\\n\\tif current_state != \\\"RED\\\":\\r\\n\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\tcurrent_state = \\\"RED\\\"\\r\\n\\r\\ndef fsm_tick():\\r\\n\\tglobal last_green_time, green_a_duration, green_b_duration, current_state, last_granted_side, both_sides_since, post_clear_start\\r\\n\\r\\n\\tif manual_mode:\\r\\n\\t\\tset_fsm_state(State.MANUAL)\\r\\n\\t\\tprint(\\\"[DEBUG] MANUAL mode → skip auto logic\\\")\\r\\n\\t\\treturn\\r\\n\\r\\n\\tnow = time.monotonic()\\r\\n\\ta_front, b_front = get_fronts()\\r\\n\\ta_back,  b_back  = get_backs()\\r\\n\\r\\n\\t# อัปเดต countdown ทุกครั้งที่ tick หากกำลังนับอยู่\\r\\n\\tif both_sides_since is not None:\\r\\n\\t\\tpublish_remaining(calc_remaining(now))\\r\\n\\r\\n\\tprint(f\\\"[DEBUG] A(front={a_front}, back={a_back}) | B(front={b_front}, back={b_back})\\\")\\r\\n\\tprint(f\\\"[DEBUG] FSM: {fsm_state.name} | last_granted={last_granted_side} | both_sides_since={both_sides_since} | post_clear_start={post_clear_start}\\\")\\r\\n\\r\\n\\t# ====== ALL_RED ======\\r\\n\\tif fsm_state == State.ALL_RED:\\r\\n\\t\\tif a_back or b_back:\\r\\n\\t\\t\\tpost_clear_start = None\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\t\\tboth_sides_since = None\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif post_clear_start is None:\\r\\n\\t\\t\\tpost_clear_start = now\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif (now - post_clear_start) < post_clear_wait:\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif not a_front and not b_front:\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif a_front and not b_front:\\r\\n\\t\\t\\tgrant_green(\\\"A\\\"); set_fsm_state(State.GREEN_A); last_granted_side = \\\"A\\\"; return\\r\\n\\t\\tif b_front and not a_front:\\r\\n\\t\\t\\tgrant_green(\\\"B\\\"); set_fsm_state(State.GREEN_B); last_granted_side = \\\"B\\\"; return\\r\\n\\r\\n\\t\\tpreferred = \\\"B\\\" if last_granted_side == \\\"A\\\" else \\\"A\\\"\\r\\n\\t\\tgrant_green(preferred)\\r\\n\\t\\tset_fsm_state(State.GREEN_A if preferred == \\\"A\\\" else State.GREEN_B)\\r\\n\\t\\tlast_granted_side = preferred\\r\\n\\t\\treturn\\r\\n\\r\\n\\t# ====== GREEN_A ======\\r\\n\\tif fsm_state == State.GREEN_A:\\r\\n\\t\\tif a_front and b_front:\\r\\n\\t\\t\\tif both_sides_since is None:\\r\\n\\t\\t\\t\\tboth_sides_since = now\\r\\n\\t\\t\\t\\tpublish_remaining(calc_remaining(now))\\r\\n\\t\\t\\t\\tprint(\\\"[DEBUG] start counting (both sides present) @A\\\")\\r\\n\\t\\t\\telapsed_both  = now - both_sides_since\\r\\n\\t\\t\\telapsed_green = now - t_green_start\\r\\n\\t\\t\\tif elapsed_green >= min_green_time and elapsed_both >= max_green_time:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_A)\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\telse:\\r\\n\\t\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\tboth_sides_since = None\\r\\n\\t\\t\\telapsed_green = now - t_green_start\\r\\n\\t\\t\\tif not a_front and b_front and elapsed_green >= min_green_time:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_A)\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\t\\tif not a_front and not b_front:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.ALL_RED)\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\treturn\\r\\n\\r\\n\\t# ====== GREEN_B ======\\r\\n\\tif fsm_state == State.GREEN_B:\\r\\n\\t\\tif a_front and b_front:\\r\\n\\t\\t\\tif both_sides_since is None:\\r\\n\\t\\t\\t\\tboth_sides_since = now\\r\\n\\t\\t\\t\\tpublish_remaining(calc_remaining(now))\\r\\n\\t\\t\\t\\tprint(\\\"[DEBUG] start counting (both sides present) @B\\\")\\r\\n\\t\\t\\telapsed_both  = now - both_sides_since\\r\\n\\t\\t\\telapsed_green = now - t_green_start\\r\\n\\t\\t\\tif elapsed_green >= min_green_time and elapsed_both >= max_green_time:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_B)\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\telse:\\r\\n\\t\\t\\tif both_sides_since is not None:\\r\\n\\t\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\tboth_sides_since = None\\r\\n\\t\\t\\telapsed_green = now - t_green_start\\r\\n\\t\\t\\tif not b_front and a_front and elapsed_green >= min_green_time:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.CLEARING_FROM_B)\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\t\\tif not a_front and not b_front:\\r\\n\\t\\t\\t\\tgrant_red(mode=\\\"auto\\\")\\r\\n\\t\\t\\t\\tset_fsm_state(State.ALL_RED)\\r\\n\\t\\t\\t\\treturn\\r\\n\\t\\treturn\\r\\n\\r\\n\\t# ====== CLEARING_FROM_A ======\\r\\n\\tif fsm_state == State.CLEARING_FROM_A:\\r\\n\\t\\tclearing_elapsed = now - t_clear_start\\r\\n\\r\\n\\t\\tif a_back or b_back:\\r\\n\\t\\t\\tpost_clear_start = None\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\tprint(\\\"[DEBUG] CLEAR_A: backs detected again -> reset safety wait\\\")\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif clearing_elapsed >= clear_delay:\\r\\n\\t\\t\\tif post_clear_start is None:\\r\\n\\t\\t\\t\\tpost_clear_start = now\\r\\n\\t\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\t\\tprint(\\\"[DEBUG] CLEAR_A: backs clear -> start safety wait\\\")\\r\\n\\t\\t\\t\\treturn\\r\\n\\r\\n\\t\\t\\tif (now - post_clear_start) >= post_clear_wait:\\r\\n\\t\\t\\t\\tgrant_green(\\\"B\\\"); set_fsm_state(State.GREEN_B); last_granted_side = \\\"B\\\"; return\\r\\n\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\t\\telse:\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t# ====== CLEARING_FROM_B ======\\r\\n\\tif fsm_state == State.CLEARING_FROM_B:\\r\\n\\t\\tclearing_elapsed = now - t_clear_start\\r\\n\\r\\n\\t\\tif a_back or b_back:\\r\\n\\t\\t\\tpost_clear_start = None\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\tclear_countdown()\\r\\n\\t\\t\\tprint(\\\"[DEBUG] CLEAR_B: backs detected again -> reset safety wait\\\")\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t\\tif clearing_elapsed >= clear_delay:\\r\\n\\t\\t\\tif post_clear_start is None:\\r\\n\\t\\t\\t\\tpost_clear_start = now\\r\\n\\t\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\t\\tprint(\\\"[DEBUG] CLEAR_B: backs clear -> start safety wait\\\")\\r\\n\\t\\t\\t\\treturn\\r\\n\\r\\n\\t\\t\\tif (now - post_clear_start) >= post_clear_wait:\\r\\n\\t\\t\\t\\tgrant_green(\\\"A\\\"); set_fsm_state(State.GREEN_A); last_granted_side = \\\"A\\\"; return\\r\\n\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\t\\telse:\\r\\n\\t\\t\\tensure_all_red()\\r\\n\\t\\t\\treturn\\r\\n\\r\\n\\t# ====== MANUAL ======\\r\\n\\tif fsm_state == State.MANUAL:\\r\\n\\t\\treturn\\r\\n\\r\\n# ===================== Output helpers =====================\\r\\ndef grant_green(side, mode=\\\"auto\\\"):\\r\\n\\tglobal last_green_time, green_a_duration, green_b_duration, current_state, last_granted_side\\r\\n\\r\\n\\tnow = time.monotonic()\\r\\n\\tduration = now - last_green_time\\r\\n\\r\\n\\t# idempotent: ถ้าฝั่งเดิมอยู่แล้ว (และไม่ได้ manual) ก็ไม่ต้องยิงซ้ำ\\r\\n\\tif current_state == side and mode != \\\"manual\\\" and current_state != \\\"RED\\\":\\r\\n\\t\\treturn\\r\\n\\r\\n\\tprint(f\\\"[DEBUG] grant_green: {side} (from {current_state})\\\")\\r\\n\\r\\n\\tif side == \\\"A\\\":\\r\\n\\t\\tgreen_a_duration += duration\\r\\n\\t\\tgreen_b_duration = 0\\r\\n\\telse:\\r\\n\\t\\tgreen_b_duration += duration\\r\\n\\t\\tgreen_a_duration = 0\\r\\n\\r\\n\\tlast_green_time = now\\r\\n\\tcurrent_state = side\\r\\n\\tlast_granted_side = side\\r\\n\\r\\n\\tmsg_green = {\\\"side\\\": side, \\\"state\\\": \\\"GREEN\\\", \\\"mode\\\": mode}\\r\\n\\tclient.publish(control_topic, json.dumps(msg_green), qos=QOS)\\r\\n\\tprint(f\\\"[{mode.upper()}] GREEN: {side} | send: {msg_green}\\\")\\r\\n\\r\\n\\tother = \\\"B\\\" if side == \\\"A\\\" else \\\"A\\\"\\r\\n\\tmsg_red = {\\\"side\\\": other, \\\"state\\\": \\\"RED\\\", \\\"mode\\\": mode}\\r\\n\\tclient.publish(control_topic, json.dumps(msg_red), qos=QOS)\\r\\n\\tprint(f\\\"[{mode.upper()}] RED: {other} | send: {msg_red}\\\")\\r\\n\\r\\ndef grant_red(mode=\\\"auto\\\"):\\r\\n\\tglobal last_green_time, current_state\\r\\n\\tlast_green_time = time.monotonic()\\r\\n\\tcurrent_state = \\\"RED\\\"\\r\\n\\tmsg = {\\\"side\\\": \\\"ALL\\\", \\\"state\\\": \\\"RED\\\", \\\"mode\\\": mode}\\r\\n\\tclient.publish(control_topic, json.dumps(msg), qos=QOS)\\r\\n\\tprint(f\\\"[{mode.upper()}] ALL RED (clearing): {msg}\\\")\\r\\n\\r\\ndef blink_light(mode=\\\"auto\\\"):\\r\\n\\tglobal last_green_time, current_state\\r\\n\\tif current_state == \\\"BLINK\\\":\\r\\n\\t\\treturn\\r\\n\\tlast_green_time = time.monotonic()\\r\\n\\tcurrent_state = \\\"BLINK\\\"\\r\\n\\tmsg = {\\\"side\\\": \\\"ALL\\\", \\\"state\\\": \\\"BLINK\\\", \\\"mode\\\": mode}\\r\\n\\tclient.publish(control_topic, json.dumps(msg), qos=QOS)\\r\\n\\tprint(f\\\"[{mode.upper()}] BLINK: {msg}\\\")\\r\\n\\r\\ndef handle_request(req):\\r\\n\\t# NOTE: ฟังก์ชัน getReqData / makeRespData จะถูก inject โดย Cira Core\\r\\n\\tpayload, img = getReqData(req)\\r\\n\\r\\n\\t# อ่านค่าจาก payload เป็น string \\\"True\\\"/\\\"False\\\" → แปลงเป็น bool\\r\\n\\tfront = str(payload.get(\\\"car_Front\\\", \\\"False\\\")) == \\\"True\\\"\\r\\n\\tback  = str(payload.get(\\\"car_Back\\\",  \\\"False\\\")) == \\\"True\\\"\\r\\n\\r\\n\\tvehicle_data[\\\"A\\\"] = {\\r\\n\\t\\t\\\"front_detected\\\": front,\\r\\n\\t\\t\\\"back_detected\\\": back,\\r\\n\\t\\t\\\"timestamp\\\": int(time.time())\\r\\n\\t}\\r\\n\\tprint(f\\\"[DEBUG] vehicle_data['A']: {vehicle_data['A']}\\\")\\r\\n\\r\\n\\t# publish detection A (เหมือนตัวอย่างเดิม)\\r\\n\\tclient.publish(topic_pub_a, json.dumps(vehicle_data[\\\"A\\\"]), qos=QOS)\\r\\n\\r\\n\\t# ให้ FSM วิ่งต่อ (รวมถึงอัปเดต countdown ถ้ากำลังนับ)\\r\\n\\tfsm_tick()\\r\\n\\r\\n\\tresp = makeRespData(payload, img)\\r\\n\\treturn resp\\r\\n\\r\\n# ===================== MQTT Setup =====================\\r\\nclient.on_message = on_message\\r\\nclient.connect(broker_address, port)\\r\\n\\r\\nclient.subscribe(topic_sub_a, qos=QOS)\\r\\nclient.subscribe(topic_sub_b, qos=QOS)\\r\\nclient.subscribe(topic_sub_time, qos=QOS)\\r\\nclient.subscribe(topic_sub_manual, qos=QOS)\\r\\n\\r\\nclient.loop_start()\\r\\n\\r\\n\",\n                    \"editor_setting\": {\n                        \"autoComplete\": {\n                            \"caseSensitivity\": true,\n                            \"enable\": true,\n                            \"threshold\": 3\n                        },\n                        \"indent\": {\n                            \"enable\": true\n                        },\n                        \"theme\": \"Material Dark\",\n                        \"whitespace\": {\n                            \"enable\": false,\n                            \"size\": 2\n                        }\n                    },\n                    \"icon\": \":/cira_bernoulli_python_plus/model/python_plus.png\",\n                    \"not_use_image\": true,\n                    \"python_path\": \"C:/Users/ROG/AppData/Local/Programs/Python/Python310/python.exe\"\n                },\n                \"name\": \"Python+\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 710.0081987399993,\n                \"y\": -134.78644097060015\n            }\n        },\n        {\n            \"id\": \"{038c09b5-0801-4096-bde7-256f703ad606}\",\n            \"model\": {\n                \"data\": {\n                    \"curr_tap\": 0,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"font_scale\": 1.2,\n                    \"font_thickness\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"kkw\",\n                            \"config_path\": \"D:/CIRaCore/summodel/model/fastest-1.1-320_ciracoco_v1\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"result_drawing\": true,\n                    \"roi_h\": 9999,\n                    \"roi_w\": 9999,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"text_drawing\": true,\n                    \"this_config_name\": \"kkw\",\n                    \"thresh\": 50,\n                    \"txt_offset\": 5\n                },\n                \"name\": \"DeepDetect \",\n                \"node_enable\": true,\n                \"obj_colors\": {\n                    \"array\": [\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 226.46241906859484,\n                \"y\": -64.84076057190065\n            }\n        },\n        {\n            \"id\": \"{9fa5ea38-39ec-4f2e-923c-276b2d2448ba}\",\n            \"model\": {\n                \"height\": 713,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 1040\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -770.6099557692323,\n                \"y\": -1094.6734193459986\n            }\n        },\n        {\n            \"id\": \"{76be71a3-0d18-4113-b8b5-ea24fa447807}\",\n            \"model\": {\n                \"data\": {\n                    \"curr_tap\": 0,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"font_scale\": 1.2,\n                    \"font_thickness\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"kkw\",\n                            \"config_path\": \"D:/CIRaCore/summodel/model/fastest-1.1-320_ciracoco_v1\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"result_drawing\": true,\n                    \"roi_h\": 9999,\n                    \"roi_w\": 9999,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"text_drawing\": true,\n                    \"this_config_name\": \"kkw\",\n                    \"thresh\": 50,\n                    \"txt_offset\": 5\n                },\n                \"name\": \"DeepDetect \",\n                \"node_enable\": true,\n                \"obj_colors\": {\n                    \"array\": [\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 227.43755864499826,\n                \"y\": -190.1990289209986\n            }\n        },\n        {\n            \"id\": \"{dd6ca20e-f08f-45cf-876f-8cae7bd5d116}\",\n            \"model\": {\n                \"height\": 708,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 1187\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 317.868829454865,\n                \"y\": -1093.2677569211703\n            }\n        },\n        {\n            \"id\": \"{37ced34d-0bcd-4c06-96ff-c309f8dad0ff}\",\n            \"model\": {\n                \"data\": {\n                    \"console\": \"\",\n                    \"height\": 434,\n                    \"js_code\": \"if(!hasGlobal(\\\"car_Back\\\")){\\n\\tsetGlobal(\\\"car_Back\\\",\\\"False\\\")\\n}\\n\\npayload.car_Back = getGlobal(\\\"car_Back\\\")\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        },\n                        \"splt0\": 342,\n                        \"splt1\": 85\n                    },\n                    \"width\": 400\n                },\n                \"name\": \"JavaScript\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 57.5192316000001,\n                \"y\": -76.42797099999916\n            }\n        },\n        {\n            \"id\": \"{d95e6de7-26c0-40d4-883a-c8a58a13f790}\",\n            \"model\": {\n                \"data\": {\n                    \"console\": \"\",\n                    \"js_code\": \"var objs = payload.DeepDetect.obj_count;\\nvar len = payload.DeepDetect.count;\\n\\nvar isCar = false;\\nfor (var i = 0; i < len; i++) {\\n\\tif (objs[i].name === \\\"person\\\") {\\n\\t\\tisCar = true;\\n\\t\\tbreak;\\n\\t}\\n}\\npayload.car_Front = isCar ? \\\"True\\\" : \\\"False\\\";\\n\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        }\n                    }\n                },\n                \"name\": \"JavaScript\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 402.04669999999953,\n                \"y\": -176.8294000000002\n            }\n        },\n        {\n            \"id\": \"{6eb01f0e-9c49-438b-a73e-5354052a299b}\",\n            \"model\": {\n                \"name\": \"PayloadCombine\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 587.7560238000001,\n                \"y\": -113.78651119\n            }\n        },\n        {\n            \"id\": \"{2a721cab-adaa-4e39-aafc-4029f8b5b921}\",\n            \"model\": {\n                \"data\": {\n                    \"console\": \"\",\n                    \"js_code\": \"var objs = payload.DeepDetect.obj_count;\\nvar len = payload.DeepDetect.count;\\n\\nvar isCar = false;\\nfor (var i = 0; i < len; i++) {\\n\\tif (objs[i].name === \\\"person\\\") {\\n\\t\\tisCar = true;\\n\\t\\tbreak;\\n\\t}\\n}\\npayload.car_Back = isCar ? \\\"True\\\" : \\\"False\\\";\",\n                    \"widget_state\": {\n                        \"editor_setting\": {\n                            \"autoComplete\": {\n                                \"caseSensitivity\": true,\n                                \"enable\": true,\n                                \"threshold\": 3\n                            },\n                            \"indent\": {\n                                \"enable\": true\n                            },\n                            \"theme\": \"Material Dark\",\n                            \"whitespace\": {\n                                \"enable\": false,\n                                \"size\": 2\n                            }\n                        }\n                    }\n                },\n                \"name\": \"JavaScript\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": 402.7021991323951,\n                \"y\": -83.9247893965998\n            }\n        },\n        {\n            \"id\": \"{b931f94c-ba84-40b8-b385-31c8a34bdfa6}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"WebCam \",\n                \"node_enable\": true,\n                \"setting\": {\n                    \"webcamUUID\": \"8A9-F7D\"\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -228.41342269528238,\n                \"y\": -72.41079432067528\n            }\n        },\n        {\n            \"id\": \"{3f5a2bbd-a638-49c8-a9a7-8eb1cc5c4d74}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"WebCam \",\n                \"node_enable\": true,\n                \"setting\": {\n                    \"webcamUUID\": \"FB6-B5B\"\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -237.76745805866176,\n                \"y\": -218.16481633632336\n            }\n        },\n        {\n            \"id\": \"{5e5189a7-2f4d-4b51-a970-cf8997d2ee8b}\",\n            \"model\": {\n                \"name\": \"AutoRun\",\n                \"node_enable\": false\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"fix\": false,\n                \"x\": -473.7855836268982,\n                \"y\": -37.43102485151005\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_fix\": false,\n        \"flow_view_pos_x\": -129.95448538152135,\n        \"flow_view_pos_y\": -731.5006341442404,\n        \"flow_view_zoom_factor\": 0.5131581182307102\n    }\n}\n",
            "name": "Main"
        }
    ]
}
